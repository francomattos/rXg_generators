#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require_relative 'Generators/accounts'
require_relative 'Generators/devices'
#generate_infrastructure_switch(count)
#generate_account(account_count, token_count, data_file, group_select)
#generate_infrastructure_wlancontroller(controller_count, wlan_count)

$curr_user =  + `whoami`

#Retreive command-line options 
options = {}
selections = []
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: generate_switches [options]"
  #Start options for switches
  opts.on('-sSWITCHES ', '--num_switches=SWITCHES', Integer, "Number of Switches to Create") do |switch_count|
    selections.push("switch")
    options[:switch_count] = switch_count
  end
  #Start options for Wlan Controllers
  opts.on('-wWLANCONTROLLERS ', '--wlan_controllers=WLANCONTROLLERS', Integer, "Number of WLAN Controllers to Create") do |controller_count|
    selections.push("wlancontroller")
    options[:controller_count] = controller_count
  end
  opts.on('-sSSIDS ', '--num_ssid=SSIDs', Integer, "Number of SSIDs to Create") do |ssid_count|
    options[:ssid_count] = ssid_count
  end
  #start options for accounts
  opts.on('-aACCTS ', '--num_accounts=ACCTS', Integer, "Number of accounts") do |accts|
    selections.push("account")
    options[:account_count] = accts
  end
  opts.on('-tTOKENS', '--num_tokens=TOKENS', Integer, "Number of tokens") do |tokens|
    options[:how_many_tokens] = tokens
  end
  opts.on('-dDATA', '--data_file=DATA', String, "Optional: YAML data file (absolute path)") do |data|
    options[:data_file] = data
  end
  opts.on('-gGROUP', '--group=GROUP', String, "Optional: generate accounts belonging to a single group") do |groups|
    options[:group] = groups
  end
  #start help menu
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end
optparse.parse!


#Initiate script environment
require File.join(File.dirname(__FILE__), '../config/boot_script_environment')
#Must be initialized inside environment
require 'netaddr'

#Generate default configuration if no option is selected
if selections.empty?
  generate_account(4, 0, nil, nil)
  generate_infrastructure_switch(4)
  generate_infrastructure_wlancontroller(1, 2)
#If options selected, generate only those options instead
else
  generate_account(options[:account_count], options[:how_many_tokens], options[:data_file], options[:group]) if selections.include?("account")
  generate_infrastructure_switch(options[:switch_count]) if selections.include?("switch")
  generate_infrastructure_wlancontroller(options[:controller_count], options[:ssid_count]) if selections.include?("wlancontroller")
end
